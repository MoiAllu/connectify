// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  email           String         @unique
  password        String
  name            String
  profilePicture  String?
  bgPicture       String?
  birthday        DateTime?
  github          String?
  location        String?
  facebook        String?
  instagram       String?
  twitter         String?
  comments        Comment[]
  likes           Like[]
  posts           Post[]
  postlikes       PostLike[]
  messages        Message[]      @relation("sender")
  seenBy          Message[]      @relation("Seen")
  conversations   Conversation[] @relation("conversation")
  conversation    Conversation?  @relation(fields: [conversationId], references: [id])
  conversationId  Int?
  seenMessage     Message?       @relation(fields: [seenMessageId], references: [id])
  seenMessageId   Int?
  friend          User?          @relation("friends", fields: [friendId], references: [id], onDelete: Cascade)
  friends         User[]         @relation("friends")
  friendId        Int?
  friendrequest   User?          @relation("request", fields: [friendRequestId], references: [id], onDelete: Cascade)
  friendrequests  User[]         @relation("request")
  friendRequestId Int?
}

model Post {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String
  content   String?
  published Boolean    @default(false)
  comments  Comment[]
  author    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  likes     Like[]
  postlikes PostLike[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
  parentId  Int?
  likes     Like[]
}

model Like {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    Int
  commentId Int
  postId    Int

  @@id([userId, commentId, postId])
}

model PostLike {
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
  userId Int
  postId Int

  @@id([userId, postId])
}

model Conversation {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  lastMessage DateTime  @default(now())
  name        String?
  isGroup     Boolean?
  message     Message[]
  userId      Int?
  usersIds    Int[]
  users       User[]
  User        User?     @relation("conversation", fields: [userId], references: [id])
}

model Message {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  body           String?
  image          String?
  sender         User         @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  seen           User?        @relation("Seen", fields: [seenId], references: [id])
  seenId         Int?
  users          User[]
}
